deliver_prediction_without_explanation_as_confirmation:
  facts:
    - satisfied(patient)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))

deliver_prediction_without_explanation_as_disconfirmation:
  facts:
    - not(satisfied(patient))
  turns:
    - U ask([]>>satisfied(patient))
    - S disconfirm(not(satisfied(patient)))

elicit_datum_explanation_for_continuous_feature:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))

elaborate_datum_quantitatively:
  facts:
    - satisfied(patient)
    - value(back_pain, patient, 4)
    - relative_value(back_pain, patient, low)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U ask([V]>>value(back_pain, patient, V))
    - S assert(value(back_pain, patient, 4))

elicit_datum_explanation_for_categorical_feature:
  facts:
    - satisfied(patient)
    - value(clinic_type, patient, private)
    - supports(value(clinic_type, X, private), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(value(clinic_type, patient, private))

elicit_warrant_explanation:
  facts:
    - satisfied(patient)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(supports(relative_value(back_pain, X, low), satisfied(X), association))

elicit_explanation_with_multiple_data_conjunctively:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - relative_value(disability, patient, low)
    - value(disability, patient, 26)
    - supports(relative_value(disability, X, low), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert([relative_value(back_pain, patient, low), relative_value(disability, patient, low)])

deliver_explanations_incrementally:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - relative_value(disability, patient, low)
    - value(disability, patient, 26)
    - supports(relative_value(disability, X, low), satisfied(X), association)
    - tcu([_])
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U icm(acceptance, positive)
    - S signal_continuation(assert(relative_value(disability, patient, low)))
    - U icm(acceptance, positive)
    - S

repeat_incremental_explanation_delivery_when_quested_repeated:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - relative_value(disability, patient, low)
    - value(disability, patient, 26)
    - supports(relative_value(disability, X, low), satisfied(X), association)
    - tcu([_])
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U icm(acceptance, positive)
    - S signal_continuation(assert(relative_value(disability, patient, low)))
    - U icm(acceptance, positive)
    - S
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U icm(acceptance, positive)
    - S signal_continuation(assert(relative_value(disability, patient, low)))
    - U icm(acceptance, positive)
    - S

explain_chained_inference_backwards:
  facts:
    - surgery_recommended(patient)
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(satisfied(X), surgery_recommended(X), norm)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - tcu([_])
  turns:
    - U ask([]>>surgery_recommended(patient))
    - S confirm(surgery_recommended(patient))
    - U ask([E, M]>>supports(E, surgery_recommended(patient), M))
    - S assert(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))

explain_chained_inference_forward:
  facts:
    - surgery_recommended(patient)
    - relative_value(back_pain, patient, low)
    - satisfied(patient)
    - value(back_pain, patient, 4)
    - supports(satisfied(X), surgery_recommended(X), norm)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - tcu([_])
  turns:
    - U ask([]>>surgery_recommended(patient))
    - S confirm(surgery_recommended(patient))
    - U ask([E, M]>>supports(E, surgery_recommended(patient), M))
    - S assert(relative_value(back_pain, patient, low))

confirm_warrant:
  facts:
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - not(supports(relative_value(back_pain, X, high), satisfied(X), _))
  turns:
    - U ask([]>>supports(relative_value(back_pain, X, low), satisfied(X), _))
    - S confirm(supports(relative_value(back_pain, X, low), satisfied(X), association))

disconfirm_warrant:
  facts:
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - not(supports(relative_value(back_pain, X, high), satisfied(X), _))
  turns:
    - U ask([]>>supports(relative_value(back_pain, X, high), satisfied(X), _))
    - S disconfirm(not(supports(relative_value(back_pain, X, high), satisfied(X), _)))

respond_to_open_request_for_forward_expansion:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - agenda(respond(_{q:[E, M]>>supports(E, satisfied(patient), M)}))
  turns:
    - S assert(relative_value(back_pain, patient, low))
    - U ask([C, M]>>supports(relative_value(back_pain, patient, low), C, M))
    - S assert(satisfied(patient))

confirm_forward_expansion:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - agenda(respond(_{q:[E, M]>>supports(E, satisfied(patient), M)}))
  turns:
    - S assert(relative_value(back_pain, patient, low))
    - U ask([]>>supports(relative_value(back_pain, patient, low), satisfied(patient), _))
    - S confirm(supports(relative_value(back_pain, patient, low), satisfied(patient), association))

provide_evidence_against_claim:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - relative_value(disability, patient, high)
    - value(disability, patient, 71)
    - supports(relative_value(disability, X, high), not(satisfied(X)), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U ask([E, M]>>supports(E, not(satisfied(patient)), M))
    - S assert(relative_value(disability, patient, high))

repeat_exhaustive_answer_for_repeated_question:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))

wh_question_concerning_means:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U ask([M]>>supports(relative_value(back_pain, X, low), satisfied(X), M))
    - S assert(supports(relative_value(back_pain, X, low), satisfied(X), association))

deliver_prediction_as_inference:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
    - agenda(argue(satisfied(patient)))
  turns:
    - S infer([relative_value(back_pain, patient, low)], satisfied(patient))

reject_unanswerable_question:
  facts:
    - satisfied(patient)
    - relative_value(back_pain, patient, low)
    - value(back_pain, patient, 4)
    - supports(relative_value(back_pain, X, low), satisfied(X), association)
  turns:
    - U ask([]>>satisfied(patient))
    - S confirm(satisfied(patient))
    - U ask([E, M]>>supports(E, satisfied(patient), M))
    - S assert(relative_value(back_pain, patient, low))
    - U ask([E]>>supports(E, relative_value(back_pain, patient, low), causation))
    - S icm(acceptance, negative, lack_knowledge([E]>>supports(E, relative_value(back_pain, patient, low), causation)))

provide_negative_understanding_when_no_semantic_interpretation:
  turns:
  - U none
  - S icm(understanding, negative)
